import java.util.function.BiConsumer

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'realm-android'
apply plugin: 'androidx.navigation.safeargs'
apply plugin: 'com.google.gms.google-services'
//apply plugin: 'com.google.firebase.appdistribution'

Properties loadProperties(String variant) {
    def props = new Properties()
    def filename = variant + ".properties"
    try {
        file(filename).withInputStream { props.load(it) }
        return props
    } catch (FileNotFoundException ignored) {
        throw new Exception("Config not found ($filename). Check out config-example.properties file.")
    }
}

HashMap<String, String> loadPropertiesIntoMap(String variant) {
    def map = new HashMap<String, String>()
    loadProperties(variant).forEach(new BiConsumer<Object, Object>() {
        @Override
        void accept(Object key, Object value) {
            map.put(key, value)
        }
    })
    return map
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.xk.cd"
        minSdkVersion 23
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    bundle {
        density {
            // Different APKs are generated for devices with different screen densities; true by default.
            enableSplit true
        }
        abi {
            // Different APKs are generated for devices with different CPU architectures; true by default.
            enableSplit true
        }
        language {
            // This is disabled so that the App Bundle does NOT split the APK for each language.
            // We're gonna use the same APK for all languages.
            enableSplit false
        }
    }

    sourceSets {
        androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
    }

    sourceSets.each {
        it.java.srcDirs += "src/$it.name/kotlin"
    }

    buildTypes {
        debug {
            for (Map.Entry<String, String> entry : loadPropertiesIntoMap("debug").entrySet()) {
                buildConfigField "String", entry.key, "\"${entry.value}\""
            }
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            for (Map.Entry<String, String> entry : loadPropertiesIntoMap("release").entrySet()) {
                buildConfigField "String", entry.key, "\"${entry.value}\""
            }
        }
    }

    buildFeatures {
        dataBinding true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = '11'
    }

    lintOptions {
        abortOnError true
        warningsAsErrors true
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    kapt {
        correctErrorTypes true
    }
}

dependencies {

    // Android
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycleCommonJava8Version"
    implementation "androidx.appcompat:appcompat:$appcompatVersion"
    implementation "androidx.constraintlayout:constraintlayout:$constraintLayoutVersion"
    implementation "androidx.annotation:annotation:$annotationVersion"
    implementation "androidx.navigation:navigation-fragment-ktx:$navigationVersion"
    implementation "androidx.navigation:navigation-ui-ktx:$navigationVersion"
    implementation "androidx.recyclerview:recyclerview:$recyclerViewVersion"
    implementation "com.google.android.material:material:$googleMaterialVersion"
    implementation "androidx.lifecycle:lifecycle-extensions:$extensionsVersion"
    implementation "androidx.lifecycle:lifecycle-reactivestreams-ktx:$reactiveStreamsVersion"
    implementation "androidx.preference:preference-ktx:$androidXPreferenceVersion"
    implementation "androidx.fragment:fragment-ktx:$fragmentKtxVersion"

    //MultiDex
    implementation "androidx.multidex:multidex:$multiDexVersion"

    // Networking
    implementation "com.squareup.okhttp3:okhttp:$okhttp4Version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp4Version"
    implementation "com.squareup.retrofit2:retrofit:$retrofit2Version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit2Version"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofit2Version"
    implementation "com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:$ktxCoroutinesAdapter"

    // Other libraries
    implementation "com.google.code.gson:gson:$gsonVersion"

    // Dependency injection
    kapt "com.google.dagger:dagger-compiler:$daggerVersion"
    kapt "com.google.dagger:dagger-android-processor:$daggerVersion"
    implementation "com.google.dagger:dagger:$daggerVersion"
    implementation "com.google.dagger:dagger-android:$daggerVersion"
    implementation "com.google.dagger:dagger-android-support:$daggerVersion"
    implementation "javax.annotation:jsr250-api:$javaxAnnotationVersion"
    implementation "javax.inject:javax.inject:$javaxInjectVersion"

    // Kotlin
//    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinCoroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlinCoroutinesVersion"

    // Reactive
    implementation "io.reactivex.rxjava2:rxjava:$rxJava2Version"
    implementation "io.reactivex.rxjava2:rxandroid:$rxAndroidVersion"

    // Firebase
    implementation platform ("com.google.firebase:firebase-bom:31.2.3")
    implementation "com.google.firebase:firebase-analytics:17.5.0"

    // Picasso
    implementation "com.squareup.picasso:picasso:$picassoVersion"

    // Custom Tabs
    implementation "androidx.browser:browser:1.3.0"

    // Testing
    testImplementation "junit:junit:$junitVersion"
    testImplementation "org.assertj:assertj-core:$assertJVersion"
    testImplementation "io.mockk:mockk:$mockkVersion"
    testImplementation "androidx.arch.core:core-testing:$archCoreVersion"
    testImplementation "org.robolectric:robolectric:$robolectricVersion"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$kotlinCoroutinesVersion"

    androidTestImplementation "androidx.test:runner:$testRunnerVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoCoreVersion"
}
